{"version":3,"sources":["components/NavMenu.js","components/EmpTable.js","components/ViewEmp.js","reducers/employeeActions.js","components/DelModal.js","components/validationSchema.js","components/ChanModal.js","components/ModalWindow.js","components/EmpList.js","components/EmpForm.js","components/NewEmp.js","reducers/settings.js","components/SettingsForm.js","components/Settings.js","App.js","serviceWorker.js","reducers/employees.js","store.js","index.js"],"names":["NavMenu","Navbar","bg","variant","Container","Brand","Nav","className","Link","to","Component","EmpTable","e","id","currentTarget","getAttribute","this","props","getSelectedId","Table","striped","bordered","hover","employeesStore","map","item","index","key","data-key","onClick","targetTableRow","bind","surname","firstName","lastName","connect","state","employees","appSettings","selectedId","chackStore","length","boxSurname","Row","Col","boxFirstName","boxLastName","boxBirthday","Moment","format","boxServiceNumber","boxPositionEmp","boxDivision","showSurname","showFirstName","showLastName","showBirthday","showServiceNumber","showPositionEmp","showDivision","Button","disabled","block","getTargetButton","addEmployee","changeEmployee","deleteEmployee","DelModal","onDelEmp","handleClose","Modal","Header","closeButton","Title","Body","Footer","deleteEmp","dispatch","emp","type","employeeActions","payload","minSymb","maxSymb","validationSchema","Yup","shape","min","max","required","birthday","serviceNumber","positionEmp","division","onChangeEmp","newValue","payloadIndex","payloadValue","employeesStoreElement","initialValues","onSubmit","values","setSubmitting","resetForm","errors","touched","handleChange","handleSubmit","Form","Group","Label","Control","placeholder","name","onChange","value","isValid","isInvalid","Feedback","ModalWindow","modalDelete","modalChange","setModal","targetButton","show","onHide","EmpList","showModal","setState","handleCloseModal","compose","withRouter","onAddEmp","history","useHistory","useState","submitAction","setSubmitAction","push","column","NewEmp","md","initialSettings","onChangeSettings","alert","Check","label","checked","Settings","App","path","exact","component","Boolean","window","location","hostname","match","initialEmployee","store","createStore","combineReducers","action","filter","it","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qTAqBeA,E,iLAfP,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACtB,kBAACC,EAAA,EAAD,KACI,kBAACH,EAAA,EAAOI,MAAR,gBACA,kBAACC,EAAA,EAAD,aAAKC,UAAU,WAAf,YAAmC,uBAC/B,kBAACD,EAAA,EAAIE,KAAL,KAAU,kBAAC,IAAD,CAAMC,GAAI,KAAV,4GACV,kBAACH,EAAA,EAAIE,KAAL,KAAU,kBAAC,IAAD,CAAMC,GAAI,gBAAV,0FACV,kBAACH,EAAA,EAAIE,KAAL,KAAU,kBAAC,IAAD,CAAMC,GAAI,aAAV,kE,GATZC,a,2CCAhBC,E,uLACaC,GACX,IAAMC,EAAKD,EAAEE,cAAcC,aAAa,YACxCC,KAAKC,MAAMC,cAAcL,K,+BAGnB,IAAD,OACL,OACI,kBAACM,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GACzB,+BACA,4BACI,iCACA,oDAGJ,+BAEIN,KAAKC,MAAMM,eAAeC,KAAI,SAACC,EAAMC,GAAP,OAC1B,wBAAIC,IAAKD,EAAOE,WAAUF,EAAOG,QAAS,EAAKC,eAAeC,KAAK,IAC/D,4BAAKL,EAAQ,GACb,4BAAKD,EAAKO,QAAV,IAAoBP,EAAKQ,UAAzB,IAAqCR,EAAKS,oB,GApB/CxB,aA8BRyB,eACX,SAAAC,GAAK,MAAK,CACNb,eAAgBa,EAAMC,aAFfF,CAIbxB,G,2BCwDawB,mBACX,SAAAC,GAAK,MAAK,CACNb,eAAgBa,EAAMC,UACtBC,YAAaF,EAAME,eAHZH,EAzFf,SAAiBlB,GAAQ,IACbsB,EAA4CtB,EAA5CsB,WAAYhB,EAAgCN,EAAhCM,eAAgBe,EAAgBrB,EAAhBqB,YAC9BE,EAAa,SAACb,GAChB,OAA4B,GAAzBJ,EAAekB,OACP,GAEAlB,EAAegB,GAAYZ,IAGpCe,EACF,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAAK,2BAAG,gFACR,kBAACA,EAAA,EAAD,KAAK,2BAAIJ,EAAW,cAGtBK,EACF,kBAACF,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAAK,2BAAG,wDACR,kBAACA,EAAA,EAAD,KAAK,2BAAIJ,EAAW,gBAGtBM,EACF,kBAACH,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAAK,2BAAG,sFACR,kBAACA,EAAA,EAAD,KAAK,2BAAIJ,EAAW,eAGtBO,EACF,kBAACJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAAK,2BAAG,+GACR,kBAACA,EAAA,EAAD,KAAK,2BAC0B,KAA3BJ,EAAW,YAAqB,GAAKQ,IAAOR,EAAW,aAAaS,OAAO,iBAIjFC,EACF,kBAACP,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAAK,2BAAG,2HACR,kBAACA,EAAA,EAAD,KAAK,2BAAIJ,EAAW,oBAGtBW,EACF,kBAACR,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAAK,2BAAG,4FACR,kBAACA,EAAA,EAAD,KAAK,2BAAIJ,EAAW,kBAGtBY,EACF,kBAACT,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAAK,2BAAG,oHACR,kBAACA,EAAA,EAAD,KAAK,2BAAIJ,EAAW,eAG5B,OACI,kBAACpC,EAAA,EAAD,KACKkC,EAAYe,YAAcX,EAAa,KACvCJ,EAAYgB,cAAgBT,EAAe,KAC3CP,EAAYiB,aAAeT,EAAc,KACzCR,EAAYkB,aAAeT,EAAc,KACzCT,EAAYmB,kBAAoBP,EAAmB,KACnDZ,EAAYoB,gBAAkBP,EAAiB,KAC/Cb,EAAYqB,aAAeP,EAAc,KAC1C,kBAACT,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,KACI,kBAACD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACgB,EAAA,EAAD,CAAQzD,QAAQ,YACR0D,SAAmC,GAAzBtC,EAAekB,OACzBqB,OAAK,EACLjC,QAAS,SAACjB,GAAD,OAAOK,EAAM8C,gBAAgB,YAH9C,qDAOJ,kBAACnB,EAAA,EAAD,KACI,kBAACgB,EAAA,EAAD,CAAQzD,QAAQ,SACR0D,SAAmC,GAAzBtC,EAAekB,OACzBqB,OAAK,EACLjC,QAAS,SAACjB,GAAD,OAAOK,EAAM8C,gBAAgB,YAH9C,sD,SChFb,GACXC,YAAa,eACbC,eAAgB,kBAChBC,eAAgB,mBCIdC,E,oLAEEnD,KAAKC,MAAMC,cAAc,GACzBF,KAAKC,MAAMmD,SAASpD,KAAKC,MAAMsB,YAC/BvB,KAAKC,MAAMoD,gB,+BAGX,OACI,6BACI,kBAACC,EAAA,EAAMC,OAAP,CAAcC,aAAW,GACrB,kBAACF,EAAA,EAAMG,MAAP,0DAEJ,kBAACH,EAAA,EAAMI,KAAP,6OACA,kBAACJ,EAAA,EAAMK,OAAP,KACI,kBAACf,EAAA,EAAD,CAAQzD,QAAQ,YAAY0B,QAASb,KAAKC,MAAMoD,aAAhD,wCAGA,kBAACT,EAAA,EAAD,CAAQzD,QAAQ,UAAU0B,QAASb,KAAK4D,UAAU7C,KAAKf,OAAvD,oD,GAjBGN,aA0BPyB,eACZ,SAAAC,GAAK,MAAK,CACNb,eAAgBa,MAEpB,SAAAyC,GAAQ,MAAK,CACTT,SAAU,SAACU,GACPD,EAAS,CACLE,KAAMC,EAAgBd,eACtBe,QAASH,QART3C,CAYdgC,G,yBC3CIe,EAAU,oFACVC,EAAU,wGAWDC,EAVUC,WAAaC,MAAM,CACxCtD,QAASqD,WAAaE,IAAI,EAAGL,GAASM,IAAI,IAAKL,GAASM,SAAS,yFACjExD,UAAWoD,WAAaE,IAAI,EAAGL,GAASM,IAAI,IAAKL,GAASM,SAAS,iEACnEvD,SAAUmD,WAAaE,IAAI,EAAGL,GAASM,IAAI,IAAKL,GAASM,SAAS,+FAClEC,SAAUL,SAAWI,SAAS,6EAC9BE,cAAeN,WAAaE,IAAI,EAAE,2MAA2CC,IAAI,OAAO,gNAAgDC,SAAS,oIACjJG,YAAaP,WAAaE,IAAI,EAAGL,GAASM,IAAI,IAAKL,GAASM,SAAS,qGACrEI,SAAUR,WAAaE,IAAI,EAAGL,GAASM,IAAI,IAAKL,GAASM,SAAS,+HC2KtDtD,mBACZ,SAAAC,GAAK,MAAK,CACNb,eAAgBa,EAAMC,cAE1B,SAAAwC,GAAQ,MAAK,CACTiB,YAAa,SAACpE,EAAOqE,GACjBlB,EAAS,CACLE,KAAMC,EAAgBf,eACtB+B,aAActE,EACduE,aAAcF,QATd5D,EA7KhB,SAAmBlB,GAAQ,IAChBM,EAA2CN,EAA3CM,eAAgBgB,EAA2BtB,EAA3BsB,WAAY8B,EAAepD,EAAfoD,YAC7B6B,EAAwB3E,EAAegB,GAC7C,OACI,6BACI,kBAAC+B,EAAA,EAAMC,OAAP,CAAcC,aAAW,GACrB,kBAACF,EAAA,EAAMG,MAAP,gEAEJ,kBAACH,EAAA,EAAMI,KAAP,KACI,kBAAC,IAAD,CAAQyB,cAAe,CACnBnE,QAASkE,EAAsBlE,QAC/BC,UAAWiE,EAAsBjE,UACjCC,SAAUgE,EAAsBhE,SAChCwD,SAAUQ,EAAsBR,SAChCC,cAAeO,EAAsBP,cACrCC,YAAaM,EAAsBN,YACnCC,SAAUK,EAAsBL,UAE5BT,iBAAkBA,EAClBgB,SAAU,SAACC,EAAD,GAAyC,IAA/BC,EAA8B,EAA9BA,cAAeC,EAAe,EAAfA,UAC/BD,GAAc,GACdrF,EAAM6E,YAAYvD,EAAW8D,GAC7BE,IACAD,GAAc,GACdjC,OAGP,gBAAEgC,EAAF,EAAEA,OAAQG,EAAV,EAAUA,OAAQC,EAAlB,EAAkBA,QAASC,EAA3B,EAA2BA,aAAcC,EAAzC,EAAyCA,aAAzC,OACG,kBAACC,EAAA,EAAD,CAAMR,SAAUO,GACZ,kBAACC,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,mDAGA,kBAACF,EAAA,EAAKG,QAAN,CAAchC,KAAK,OACLiC,YAAY,wFACZC,KAAK,UAAUpG,GAAG,UAClBqG,SAAUR,EACVS,MAAOd,EAAOrE,QACdoF,QAASX,EAAQzE,UAAYwE,EAAOxE,QACpCqF,YAAab,EAAOxE,UAElC,kBAAC4E,EAAA,EAAKG,QAAQO,SAAd,CAAuBvC,KAAK,WACvByB,EAAOxE,UAGhB,kBAAC4E,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,2BAGA,kBAACF,EAAA,EAAKG,QAAN,CAAchC,KAAK,OACLiC,YAAY,gEACZC,KAAK,YACLpG,GAAG,YACHqG,SAAUR,EACVS,MAAOd,EAAOpE,UACdmF,QAASX,EAAQxE,YAAcuE,EAAOvE,UACtCoF,YAAab,EAAOvE,YAElC,kBAAC2E,EAAA,EAAKG,QAAQO,SAAd,CAAuBvC,KAAK,WACvByB,EAAOvE,YAGhB,kBAAC2E,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,yDAGA,kBAACF,EAAA,EAAKG,QAAN,CAAchC,KAAK,OACLiC,YAAY,8FACZC,KAAK,WACLpG,GAAG,WACHqG,SAAUR,EACVS,MAAOd,EAAOnE,SACdkF,QAASX,EAAQvE,WAAasE,EAAOtE,SACrCmF,YAAab,EAAOtE,WAElC,kBAAC0E,EAAA,EAAKG,QAAQO,SAAd,CAAuBvC,KAAK,WACvByB,EAAOtE,WAGhB,kBAAC0E,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,kFAGA,kBAACF,EAAA,EAAKG,QAAN,CAAchC,KAAK,OACLiC,YAAY,uHACZC,KAAK,WACLpG,GAAG,WACHqG,SAAUR,EACVS,MAAOd,EAAOX,SACd0B,QAASX,EAAQf,WAAac,EAAOd,SACrC2B,YAAab,EAAOd,WAElC,kBAACkB,EAAA,EAAKG,QAAQO,SAAd,CAAuBvC,KAAK,WACvByB,EAAOd,WAGhB,kBAACkB,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,8FAGA,kBAACF,EAAA,EAAKG,QAAN,CAAchC,KAAK,SACLiC,YAAY,mIACZC,KAAK,gBACLpG,GAAG,gBACHqG,SAAUR,EACVS,MAAOd,EAAOV,cACdyB,QAASX,EAAQd,gBAAkBa,EAAOb,cAC1C0B,YAAab,EAAOb,gBAElC,kBAACiB,EAAA,EAAKG,QAAQO,SAAd,CAAuBvC,KAAK,WACvByB,EAAOb,gBAGhB,kBAACiB,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,+DAGA,kBAACF,EAAA,EAAKG,QAAN,CAAchC,KAAK,OACLiC,YAAY,oGACZC,KAAK,cACLpG,GAAG,cACHqG,SAAUR,EACVS,MAAOd,EAAOT,YACdwB,QAASX,EAAQb,cAAgBY,EAAOZ,YACxCyB,YAAab,EAAOZ,cAElC,kBAACgB,EAAA,EAAKG,QAAQO,SAAd,CAAuBvC,KAAK,WACvByB,EAAOZ,cAGhB,kBAACgB,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,uFAGA,kBAACF,EAAA,EAAKG,QAAN,CAAchC,KAAK,OACLiC,YAAY,4HACZC,KAAK,WACLpG,GAAG,WACHqG,SAAUR,EACVS,MAAOd,EAAOR,SACduB,QAASX,EAAQZ,WAAaW,EAAOX,SACrCwB,YAAab,EAAOX,WAElC,kBAACe,EAAA,EAAKG,QAAQO,SAAd,CAAuBvC,KAAK,WACvByB,EAAOX,WAIhB,kBAACe,EAAA,EAAKjE,IAAN,KACI,kBAACC,EAAA,EAAD,KACI,kBAACgB,EAAA,EAAD,CAAQzD,QAAQ,OAAO2D,OAAK,EAACjC,QAAS,WAClC8E,MADJ,2DAMJ,kBAAC/D,EAAA,EAAD,KACI,kBAACgB,EAAA,EAAD,CAAQzD,QAAQ,YAAY2D,OAAK,EAACjC,QAAS,WACvCwC,MADJ,mDCjIrBkD,E,YA9BX,WAAYtG,GAAQ,IAAD,8BACf,4CAAMA,KACDmB,MAAS,CACVoF,aAAa,EACbC,aAAa,GAJF,E,sEASf,IAAIC,EAWJ,MAV+B,WAA5B1G,KAAKC,MAAM0G,aACVD,EAAW,kBAAC,EAAD,CAAUrD,YAAarD,KAAKC,MAAMoD,YACxB9B,WAAYvB,KAAKC,MAAMsB,WACvBrB,cAAeF,KAAKC,MAAMC,gBAEZ,WAA5BF,KAAKC,MAAM0G,eAClBD,EAAW,kBAAC,EAAD,CAAWrD,YAAarD,KAAKC,MAAMoD,YACxB9B,WAAYvB,KAAKC,MAAMsB,cAI7C,kBAAC+B,EAAA,EAAD,CAAOsD,KAAM5G,KAAKC,MAAM2G,KAAMC,OAAQ7G,KAAKC,MAAMoD,aAE5CqD,O,GAxBShH,aCkDXoH,E,YAhDX,WAAY7G,GAAQ,IAAD,8BACf,4CAAMA,KACDmB,MAAS,CACVG,WAAY,EACZwF,WAAW,EACXJ,aAAc,MAElB,EAAKzG,cAAgB,EAAKA,cAAca,KAAnB,gBAPN,E,2EASLQ,GACVvB,KAAKgH,SAAS,CACVzF,WAAYA,M,yCAIlBvB,KAAKgH,SAAS,CACVD,WAAW,M,sCAGD3F,GACZpB,KAAKgH,SAAS,CACVD,WAAW,EACXJ,aAAcvF,M,+BAIlB,OACI,kBAAChC,EAAA,EAAD,KACI,kBAACuC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,CAASL,WAAYvB,KAAKoB,MAAMG,WACvBwB,gBAAiB/C,KAAK+C,gBAAgBhC,KAAKf,SAExD,kBAAC4B,EAAA,EAAD,KACI,kBAAC,EAAD,CAAU1B,cAAeF,KAAKE,kBAGtC,kBAAC,EAAD,CAAa0G,KAAM5G,KAAKoB,MAAM2F,UACjB1D,YAAarD,KAAKiH,iBAAiBlG,KAAKf,MACxC2G,aAAc3G,KAAKoB,MAAMuF,aACzBpF,WAAYvB,KAAKoB,MAAMG,WACvBrB,cAAeF,KAAKE,qB,GA1C3BR,a,yBC4KPwH,kBACXC,IACAhG,aACA,SAAAC,GAAK,MAAK,CACNb,eAAgBa,MAEpB,SAAAyC,GAAQ,MAAK,CACTuD,SAAU,SAACtD,GACPD,EAAS,CACLE,KAAMC,EAAgBhB,YACtBiB,QAASH,SAVVoD,EAzKf,SAAiBjH,GACb,IAAIoH,EAAUC,cADM,EAEoBC,mBAAS,MAF7B,mBAEbC,EAFa,KAECC,EAFD,KAGpB,OACI,kBAAC,IAAD,CACItC,cAAe,CACXnE,QAAS,GACTC,UAAW,GACXC,SAAU,GACVwD,SAAU,GACVC,cAAe,GACfC,YAAa,GACbC,SAAU,IAEdT,iBAAkBA,EAClBgB,SAAU,SAACC,EAAD,GAAyC,IAA/BC,EAA8B,EAA9BA,cAAeC,EAAe,EAAfA,UAC3BD,GAAc,GACdrF,EAAMmH,SAAS/B,GACfE,IACAD,GAAc,GACE,sBAAjBkC,GACCH,EAAQK,KAAK,QAIpB,gBAAErC,EAAF,EAAEA,OAAQG,EAAV,EAAUA,OAAQC,EAAlB,EAAkBA,QAASC,EAA3B,EAA2BA,aAAcC,EAAzC,EAAyCA,aAAzC,OACD,kBAACC,EAAA,EAAD,CAAMR,SAAUO,GACZ,kBAACC,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,CAAY6B,OAAQ,GAApB,8CAGA,kBAAC/B,EAAA,EAAKG,QAAN,CAAchC,KAAK,OACLiC,YAAY,wFACZC,KAAK,UAAUpG,GAAG,UAClBqG,SAAUR,EACVS,MAAOd,EAAOrE,QACdoF,QAASX,EAAQzE,UAAYwE,EAAOxE,QACpCqF,YAAab,EAAOxE,UAElC,kBAAC4E,EAAA,EAAKG,QAAQO,SAAd,CAAuBvC,KAAK,WACvByB,EAAOxE,UAGhB,kBAAC4E,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,CAAY6B,OAAQ,GAApB,sBAGA,kBAAC/B,EAAA,EAAKG,QAAN,CAAchC,KAAK,OACLiC,YAAY,gEACZC,KAAK,YACLpG,GAAG,YACHqG,SAAUR,EACVS,MAAOd,EAAOpE,UACdmF,QAASX,EAAQxE,YAAcuE,EAAOvE,UACtCoF,YAAab,EAAOvE,YAElC,kBAAC2E,EAAA,EAAKG,QAAQO,SAAd,CAAuBvC,KAAK,WACvByB,EAAOvE,YAGhB,kBAAC2E,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,CAAY6B,OAAQ,GAApB,oDAGA,kBAAC/B,EAAA,EAAKG,QAAN,CAAchC,KAAK,OACLiC,YAAY,8FACZC,KAAK,WACLpG,GAAG,WACHqG,SAAUR,EACVS,MAAOd,EAAOnE,SACdkF,QAASX,EAAQvE,WAAasE,EAAOtE,SACrCmF,YAAab,EAAOtE,WAElC,kBAAC0E,EAAA,EAAKG,QAAQO,SAAd,CAAuBvC,KAAK,WACvByB,EAAOtE,WAGhB,kBAAC0E,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,CAAY6B,OAAQ,GAApB,6EAGA,kBAAC/B,EAAA,EAAKG,QAAN,CAAchC,KAAK,OACLiC,YAAY,uHACZC,KAAK,WACLpG,GAAG,WACHqG,SAAUR,EACVS,MAAOd,EAAOX,SACd0B,QAASX,EAAQf,WAAac,EAAOd,SACrC2B,YAAab,EAAOd,WAElC,kBAACkB,EAAA,EAAKG,QAAQO,SAAd,CAAuBvC,KAAK,WACvByB,EAAOd,WAGhB,kBAACkB,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,CAAY6B,OAAQ,GAApB,yFAGA,kBAAC/B,EAAA,EAAKG,QAAN,CAAchC,KAAK,SACLiC,YAAY,mIACZC,KAAK,gBACLpG,GAAG,gBACHqG,SAAUR,EACVS,MAAOd,EAAOV,cACdyB,QAASX,EAAQd,gBAAkBa,EAAOb,cAC1C0B,YAAab,EAAOb,gBAElC,kBAACiB,EAAA,EAAKG,QAAQO,SAAd,CAAuBvC,KAAK,WACvByB,EAAOb,gBAGhB,kBAACiB,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,CAAY6B,OAAQ,GAApB,0DAGA,kBAAC/B,EAAA,EAAKG,QAAN,CAAchC,KAAK,OACLiC,YAAY,oGACZC,KAAK,cACLpG,GAAG,cACHqG,SAAUR,EACVS,MAAOd,EAAOT,YACdwB,QAASX,EAAQb,cAAgBY,EAAOZ,YACxCyB,YAAab,EAAOZ,cAElC,kBAACgB,EAAA,EAAKG,QAAQO,SAAd,CAAuBvC,KAAK,WACvByB,EAAOZ,cAGhB,kBAACgB,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,CAAY6B,OAAQ,GAApB,kFAGA,kBAAC/B,EAAA,EAAKG,QAAN,CAAchC,KAAK,OACLiC,YAAY,4HACZC,KAAK,WACLpG,GAAG,WACHqG,SAAUR,EACVS,MAAOd,EAAOR,SACduB,QAASX,EAAQZ,WAAaW,EAAOX,SACrCwB,YAAab,EAAOX,WAElC,kBAACe,EAAA,EAAKG,QAAQO,SAAd,CAAuBvC,KAAK,WACvByB,EAAOX,WAIhB,kBAACe,EAAA,EAAKjE,IAAN,KACI,kBAACC,EAAA,EAAD,KACI,kBAACgB,EAAA,EAAD,CAAQzD,QAAQ,OAAO0B,QAAS,WAC5B8E,MADJ,sIAMJ,kBAAC/D,EAAA,EAAD,KACI,kBAACgB,EAAA,EAAD,CAAQzD,QAAQ,YAAY0B,QAAS,WACjC4G,EAAgB,qBAChB9B,MAFJ,iKCnJTiC,E,iLAZP,OACI,kBAACxI,EAAA,EAAD,KACI,kBAACuC,EAAA,EAAD,CAAKpC,UAAU,6BACX,kBAACqC,EAAA,EAAD,CAAKiG,GAAG,KACJ,kBAAC,EAAD,a,GANHnI,aCJfoI,EAAkB,CACpBzF,aAAa,EACbC,eAAe,EACfC,cAAc,EACdC,cAAc,EACdC,mBAAmB,EACnBC,iBAAiB,EACjBC,cAAc,GC2FHxB,mBACX,SAAAC,GAAK,MAAK,CACNE,YAAaF,EAAME,gBAEvB,SAAAuC,GAAQ,MAAK,CACTkE,iBAAkB,SAACjE,GACfD,EAAS,CACLE,KAAM,iBACNE,QAASH,QARV3C,EA5Ff,SAAsBlB,GAAQ,IACnBqB,EAAerB,EAAfqB,YACP,OACI,kBAAC,IAAD,CAAQ6D,cAAe,CACnB7C,cAAehB,EAAYgB,cAC3BD,YAAaf,EAAYe,YACzBE,aAAcjB,EAAYiB,aAC1BC,aAAclB,EAAYkB,aAC1BC,kBAAmBnB,EAAYmB,kBAC/BC,gBAAiBpB,EAAYoB,gBAC7BC,aAAcrB,EAAYqB,cAEtByC,SAAU,SAACC,GACPpF,EAAM8H,iBAAiB1C,GACvB2C,MAAM,qHAGV,gBAAE3C,EAAF,EAAEA,OAAQK,EAAV,EAAUA,aAAcC,EAAxB,EAAwBA,aAAxB,OACI,kBAACC,EAAA,EAAD,CAAMR,SAAUO,GACZ,kBAACC,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKqC,MAAN,CAAYlE,KAAK,WACLkC,KAAK,gBACLiC,MAAM,kFACNC,QAAS9C,EAAO/C,cAChB6D,MAAOd,EAAO/C,cACd4D,SAAUR,KAG1B,kBAACE,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKqC,MAAN,CAAYlE,KAAK,WACLkC,KAAK,cACLiC,MAAM,0GACNC,QAAS9C,EAAOhD,YAChB8D,MAAOd,EAAOhD,YACd6D,SAAUR,KAG1B,kBAACE,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKqC,MAAN,CAAYlE,KAAK,WACLkC,KAAK,eACLiC,MAAM,gHACNC,QAAS9C,EAAO9C,aAChB4D,MAAOd,EAAO9C,aACd2D,SAAUR,KAG1B,kBAACE,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKqC,MAAN,CAAYlE,KAAK,WACLkC,KAAK,eACLiC,MAAM,yIACNC,QAAS9C,EAAO7C,aAChB2D,MAAOd,EAAO7C,aACd0D,SAAUR,KAG1B,kBAACE,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKqC,MAAN,CAAYlE,KAAK,WACLkC,KAAK,oBACLiC,MAAM,qJACNC,QAAS9C,EAAO5C,kBAChB0D,MAAOd,EAAO5C,kBACdyD,SAAUR,KAG1B,kBAACE,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKqC,MAAN,CAAYlE,KAAK,WACLkC,KAAK,kBACLiC,MAAM,sHACNC,QAAS9C,EAAO3C,gBAChByD,MAAOd,EAAO3C,gBACdwD,SAAUR,KAG1B,kBAACE,EAAA,EAAKC,MAAN,KACI,kBAACD,EAAA,EAAKqC,MAAN,CAAYlE,KAAK,WACLkC,KAAK,eACLiC,MAAM,8IACNC,QAAS9C,EAAO1C,aAChBwD,MAAOd,EAAO1C,aACduD,SAAUR,KAG1B,kBAAC9C,EAAA,EAAD,CAAQzD,QAAQ,YAAY4E,KAAK,UAAjC,wHCzETqE,E,iLARP,OACI,kBAAChJ,EAAA,EAAD,KACI,kBAAC,EAAD,W,GAJOM,aCqBR2I,E,iLAfP,OACI,kBAAC,IAAD,KACI,yBAAK9I,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO+I,KAAK,IAAIC,OAAK,EAACC,UAAW1B,IACjC,kBAAC,IAAD,CAAOwB,KAAK,eAAeE,UAAWZ,IACtC,kBAAC,IAAD,CAAOU,KAAK,YAAYE,UAAWJ,W,GATzC1I,aCGE+I,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,aChBAC,EAAkB,CACtB9H,QAAS,uCACTC,UAAW,2BACXC,SAAU,mDACVwD,SAAU,aACVC,cAAe,SACfC,YAAa,4HACbC,SAAU,oICLZ,IAEekE,EAFDC,YAAYC,YAAgB,CAAC5H,UDQ5B,WAAuD,IAApCD,EAAmC,uDAA3B,CAAC0H,GAAkBI,EAAQ,uCAEjE,OAAQA,EAAOnF,MACX,KAAKC,EAAgBhB,YACjB,MAAM,GAAN,mBACO5B,GADP,CAEI8H,EAAOjF,UAGf,KAAKD,EAAgBd,eAEjB,OADW9B,EAAM+H,QAAO,SAACC,EAAI1I,GAAL,OAAeA,GAASwI,EAAOjF,WAG3D,KAAKD,EAAgBf,eAQjB,OAPW7B,EAAMZ,KAAK,SAAC2F,EAAOzF,GAC1B,OAAGA,GAASwI,EAAOlE,aACRkE,EAAOjE,aAEPkB,KAKnB,QACI,OAAO/E,IChCmCE,YNMvC,WAAoD,IAAlCF,EAAiC,uDAAzB0G,EAAiBoB,EAAQ,uCAC9D,MAAmB,mBAAhBA,EAAOnF,KACYmF,EAAOjF,QAGtB7C,KMX0DsH,OAAOW,8BAAgCX,OAAOW,gCCQnHC,IAASC,OACL,kBAAC,IAAD,CAAUR,MAAOA,GACb,kBAAC,EAAD,OAENS,SAASC,eAAe,SHiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1271d945.chunk.js","sourcesContent":["import React, { Component} from 'react';\r\nimport { Navbar, Nav, Container} from 'react-bootstrap';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass NavMenu extends Component {\r\n    render() {\r\n        return (\r\n            <Navbar bg=\"dark\" variant=\"dark\">\r\n                <Container>\r\n                    <Navbar.Brand>SB-DEMO</Navbar.Brand>\r\n                    <Nav className=\"mr-auto\" className=\"justify-content-end\">\r\n                        <Nav.Link><Link to={'/'}>Список сотрудников</Link></Nav.Link>\r\n                        <Nav.Link><Link to={'/newemployee'}>Добавить запись</Link></Nav.Link>\r\n                        <Nav.Link><Link to={'/settings'}>Настройки</Link></Nav.Link>\r\n                    </Nav>\r\n                </Container>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavMenu;\r\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { Table } from 'react-bootstrap';\n\nclass EmpTable extends Component {\n    targetTableRow(e) {\n        const id = e.currentTarget.getAttribute('data-key');\n        this.props.getSelectedId(id);\n    };\n\n    render() {\n        return (\n            <Table striped bordered hover>\n                <thead>\n                <tr>\n                    <th>#</th>\n                    <th>ФИО</th>\n                </tr>\n                </thead>\n                <tbody>\n                {\n                    this.props.employeesStore.map((item, index) =>\n                        <tr key={index} data-key={index} onClick={this.targetTableRow.bind(this)}>\n                            <th>{index + 1}</th>\n                            <td>{item.surname} {item.firstName} {item.lastName}</td>\n                        </tr>\n                    )\n                }\n                </tbody>\n            </Table>\n        )\n    }\n}\n\nexport default connect(\n    state => ({\n        employeesStore: state.employees\n    })\n)(EmpTable);\n","import React, {  } from 'react';\nimport { connect } from \"react-redux\";\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\nimport Moment from 'moment';\n\nfunction ViewEmp(props) {\n    const { selectedId, employeesStore, appSettings } = props;\n    const chackStore = (key) => {\n        if(employeesStore.length == 0) {\n            return ''\n        } else {\n            return employeesStore[selectedId][key]\n        }\n    };\n    const boxSurname = (\n        <Row>\n            <Col><p><strong>Фамилия</strong></p></Col>\n            <Col><p>{chackStore('surname')}</p></Col>\n        </Row>\n    );\n    const boxFirstName = (\n        <Row>\n            <Col><p><strong>Имя</strong></p></Col>\n            <Col><p>{chackStore('firstName')}</p></Col>\n        </Row>\n    );\n    const boxLastName = (\n        <Row>\n            <Col><p><strong>Отчество</strong></p></Col>\n            <Col><p>{chackStore('lastName')}</p></Col>\n        </Row>\n    );\n    const boxBirthday = (\n        <Row>\n            <Col><p><strong>Дата рождения</strong></p></Col>\n            <Col><p>{\n                chackStore('birthday') === '' ? '' : Moment(chackStore('birthday')).format(\"DD.MM.YYYY\")\n            }</p></Col>\n        </Row>\n    );\n    const boxServiceNumber = (\n        <Row>\n            <Col><p><strong>Табельный номер</strong></p></Col>\n            <Col><p>{chackStore('serviceNumber')}</p></Col>\n        </Row>\n    );\n    const boxPositionEmp = (\n        <Row>\n            <Col><p><strong>Должность</strong></p></Col>\n            <Col><p>{chackStore('positionEmp')}</p></Col>\n        </Row>\n    );\n    const boxDivision = (\n        <Row>\n            <Col><p><strong>Подразделение</strong></p></Col>\n            <Col><p>{chackStore('division')}</p></Col>\n        </Row>\n    );\n    return (\n        <Container>\n            {appSettings.showSurname ? boxSurname : null}\n            {appSettings.showFirstName ? boxFirstName : null}\n            {appSettings.showLastName ? boxLastName : null}\n            {appSettings.showBirthday ? boxBirthday : null}\n            {appSettings.showServiceNumber ? boxServiceNumber : null}\n            {appSettings.showPositionEmp ? boxPositionEmp : null}\n            {appSettings.showDivision ? boxDivision : null}\n            <Row>\n                <Col></Col>\n                <Col>\n                    <Row>\n                        <Col>\n                            <Button variant='secondary'\n                                    disabled={employeesStore.length == 0}\n                                    block\n                                    onClick={(e) => props.getTargetButton('change')}>\n                                Изменить\n                            </Button>\n                        </Col>\n                        <Col>\n                            <Button variant='danger'\n                                    disabled={employeesStore.length == 0}\n                                    block\n                                    onClick={(e) => props.getTargetButton('delete')}>\n                                Удалить\n                            </Button>\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default connect(\n    state => ({\n        employeesStore: state.employees,\n        appSettings: state.appSettings\n    })\n)(ViewEmp);\n","export default {\r\n    addEmployee: 'ADD_EMPLOYEE',\r\n    changeEmployee: 'CHANGE_EMPLOYEE',\r\n    deleteEmployee: 'DELETE_EMPLOYEE'\r\n};\r\n","import React, { Component } from \"react\";\nimport {Modal} from \"react-bootstrap\";\nimport {Button} from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\n\nimport employeeActions from '../reducers/employeeActions';\n\nclass DelModal extends Component {\n    deleteEmp() {\n        this.props.getSelectedId(0);\n        this.props.onDelEmp(this.props.selectedId);\n        this.props.handleClose();\n    };\n    render() {\n        return (\n            <div>\n                <Modal.Header closeButton>\n                    <Modal.Title>Удаление</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>Вы действительно хотите удалить эту запись?</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={this.props.handleClose}>\n                        Отмена\n                    </Button>\n                    <Button variant=\"primary\" onClick={this.deleteEmp.bind(this)}>\n                        Удалить\n                    </Button>\n                </Modal.Footer>\n            </div>\n        )\n    }\n}\n\nexport  default connect(\n    state => ({\n        employeesStore: state\n    }),\n    dispatch => ({\n        onDelEmp: (emp) => {\n            dispatch({\n                type: employeeActions.deleteEmployee,\n                payload: emp\n            })\n        }\n    })\n)(DelModal);\n","import * as Yup from 'yup';\n\nconst minSymb = 'Минимум 1 символ';\nconst maxSymb = 'Максимум 255 символов';\nconst validationSchema = Yup.object().shape({\n    surname: Yup.string().min(1, minSymb).max(255, maxSymb).required('Введите фамилию'),\n    firstName: Yup.string().min(1, minSymb).max(255, maxSymb).required('Введите имя'),\n    lastName: Yup.string().min(1, minSymb).max(255, maxSymb).required('Введите отчество'),\n    birthday: Yup.date().required('Выберите дату'),\n    serviceNumber: Yup.number().min(1,'Табельный номер должен быть не меньше 1').max(999999,'Табельный номер должен быть не больше 999999').required('Введите табельный номер'),\n    positionEmp: Yup.string().min(1, minSymb).max(255, maxSymb).required('Введите должность'),\n    division: Yup.string().min(1, minSymb).max(255, maxSymb).required('Введите подразделение')\n});\n\nexport default validationSchema;\n","import React from \"react\";\nimport {Col, Form, Modal} from \"react-bootstrap\";\nimport {Button} from \"react-bootstrap\";\nimport {Formik} from \"formik\";\nimport {connect} from \"react-redux\";\nimport validationSchema from \"./validationSchema\";\n\nimport employeeActions from \"../reducers/employeeActions\";\n\nfunction ChanModal(props) {\n    const {employeesStore, selectedId, handleClose} = props;\n    const employeesStoreElement = employeesStore[selectedId];\n    return (\n        <div>\n            <Modal.Header closeButton>\n                <Modal.Title>Изменение</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Formik initialValues={{\n                    surname: employeesStoreElement.surname,\n                    firstName: employeesStoreElement.firstName,\n                    lastName: employeesStoreElement.lastName,\n                    birthday: employeesStoreElement.birthday,\n                    serviceNumber: employeesStoreElement.serviceNumber,\n                    positionEmp: employeesStoreElement.positionEmp,\n                    division: employeesStoreElement.division\n                }}\n                        validationSchema={validationSchema}\n                        onSubmit={(values, {setSubmitting, resetForm}) => {\n                            setSubmitting(true);\n                            props.onChangeEmp(selectedId,values);\n                            resetForm();\n                            setSubmitting(false);\n                            handleClose();\n                        }}\n                >\n                    {({values, errors, touched, handleChange, handleSubmit}) => (\n                        <Form onSubmit={handleSubmit}>\n                            <Form.Group>\n                                <Form.Label>\n                                    Фамилия\n                                </Form.Label>\n                                <Form.Control type=\"text\"\n                                              placeholder=\"Введите фамилию\"\n                                              name=\"surname\" id=\"surName\"\n                                              onChange={handleChange}\n                                              value={values.surname}\n                                              isValid={touched.surname && !errors.surname}\n                                              isInvalid={!!errors.surname}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {errors.surname}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>\n                                    Имя\n                                </Form.Label>\n                                <Form.Control type=\"text\"\n                                              placeholder=\"Введите имя\"\n                                              name=\"firstName\"\n                                              id=\"firstName\"\n                                              onChange={handleChange}\n                                              value={values.firstName}\n                                              isValid={touched.firstName && !errors.firstName}\n                                              isInvalid={!!errors.firstName}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {errors.firstName}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>\n                                    Отчество\n                                </Form.Label>\n                                <Form.Control type=\"text\"\n                                              placeholder=\"Введите отчество\"\n                                              name=\"lastName\"\n                                              id=\"lastName\"\n                                              onChange={handleChange}\n                                              value={values.lastName}\n                                              isValid={touched.lastName && !errors.lastName}\n                                              isInvalid={!!errors.lastName}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {errors.lastName}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>\n                                    Дата рождения\n                                </Form.Label>\n                                <Form.Control type=\"date\"\n                                              placeholder=\"Введите дату рождения\"\n                                              name=\"birthday\"\n                                              id=\"birthday\"\n                                              onChange={handleChange}\n                                              value={values.birthday}\n                                              isValid={touched.birthday && !errors.birthday}\n                                              isInvalid={!!errors.birthday}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {errors.birthday}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>\n                                    Табельный номер\n                                </Form.Label>\n                                <Form.Control type=\"number\"\n                                              placeholder=\"Введите табельный номер\"\n                                              name=\"serviceNumber\"\n                                              id=\"serviceNumber\"\n                                              onChange={handleChange}\n                                              value={values.serviceNumber}\n                                              isValid={touched.serviceNumber && !errors.serviceNumber}\n                                              isInvalid={!!errors.serviceNumber}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {errors.serviceNumber}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>\n                                    Должность\n                                </Form.Label>\n                                <Form.Control type=\"text\"\n                                              placeholder=\"Введите должность\"\n                                              name=\"positionEmp\"\n                                              id=\"positionEmp\"\n                                              onChange={handleChange}\n                                              value={values.positionEmp}\n                                              isValid={touched.positionEmp && !errors.positionEmp}\n                                              isInvalid={!!errors.positionEmp}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {errors.positionEmp}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>\n                                    Подразделение\n                                </Form.Label>\n                                <Form.Control type=\"text\"\n                                              placeholder=\"Введите подразделение\"\n                                              name=\"division\"\n                                              id=\"division\"\n                                              onChange={handleChange}\n                                              value={values.division}\n                                              isValid={touched.division && !errors.division}\n                                              isInvalid={!!errors.division}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {errors.division}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n\n                            <Form.Row>\n                                <Col>\n                                    <Button variant=\"dark\" block onClick={() => {\n                                        handleSubmit();\n                                    }}>\n                                        Сохранить\n                                    </Button>\n                                </Col>\n                                <Col>\n                                    <Button variant=\"secondary\" block onClick={() => {\n                                        handleClose();\n                                    }}>\n                                        Отмена\n                                    </Button>\n                                </Col>\n                            </Form.Row>\n                        </Form>\n                    )}\n                </Formik>\n            </Modal.Body>\n        </div>\n    )\n}\n\n\nexport  default connect(\n    state => ({\n        employeesStore: state.employees\n    }),\n    dispatch => ({\n        onChangeEmp: (index, newValue) => {\n            dispatch({\n                type: employeeActions.changeEmployee,\n                payloadIndex: index,\n                payloadValue: newValue\n            })\n        }\n    })\n)(ChanModal);\n","import React, { Component } from \"react\";\nimport { Modal, Button } from 'react-bootstrap';\n\nimport DelModal from \"./DelModal\";\nimport ChanModal from \"./ChanModal\";\n\nclass ModalWindow extends Component {\n    constructor(props) {\n        super(props);\n        this.state = ({\n            modalDelete: false,\n            modalChange: false\n        })\n\n    };\n    render() {\n        let setModal;\n        if(this.props.targetButton === 'delete') {\n            setModal = <DelModal handleClose={this.props.handleClose}\n                                 selectedId={this.props.selectedId}\n                                 getSelectedId={this.props.getSelectedId}\n            />\n        } else if (this.props.targetButton === 'change') {\n            setModal = <ChanModal handleClose={this.props.handleClose}\n                                  selectedId={this.props.selectedId}\n            />\n        }\n        return (\n            <Modal show={this.props.show} onHide={this.props.handleClose}>\n\n                {setModal}\n\n            </Modal>\n        );\n    }\n}\n\nexport default ModalWindow;\n","import React, { Component } from \"react\";\nimport { Container, Row, Col} from 'react-bootstrap';\n\nimport EmpTable from \"./EmpTable\";\nimport ViewEmp from './ViewEmp';\nimport ModalWindow from \"./ModalWindow\";\n\nclass EmpList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = ({\n            selectedId: 0,\n            showModal: false,\n            targetButton: null\n        });\n        this.getSelectedId = this.getSelectedId.bind(this);\n    }\n    getSelectedId(selectedId) {\n        this.setState({\n            selectedId: selectedId\n        });\n    };\n    handleCloseModal() {\n      this.setState({\n          showModal: false\n      })\n    };\n    getTargetButton(state) {\n        this.setState({\n            showModal: true,\n            targetButton: state\n        })\n    }\n    render() {\n        return (\n            <Container>\n                <Row>\n                    <Col>\n                        <ViewEmp selectedId={this.state.selectedId}\n                                 getTargetButton={this.getTargetButton.bind(this)}/>\n                    </Col>\n                    <Col>\n                        <EmpTable getSelectedId={this.getSelectedId}/>\n                    </Col>\n                </Row>\n                <ModalWindow show={this.state.showModal}\n                             handleClose={this.handleCloseModal.bind(this)}\n                             targetButton={this.state.targetButton}\n                             selectedId={this.state.selectedId}\n                             getSelectedId={this.getSelectedId}\n                />\n            </Container>\n        );\n    }\n}\n\nexport default EmpList;\n","import React, {useState} from \"react\";\nimport { connect } from \"react-redux\";\nimport { Formik } from 'formik';\nimport { Form, Button, Col } from 'react-bootstrap';\nimport { useHistory, withRouter } from \"react-router\";\nimport validationSchema from \"./validationSchema\";\nimport {compose} from \"redux\";\n\nimport employeeActions from '../reducers/employeeActions'\n\nfunction EmpForm(props) {\n    let history = useHistory();\n    const [submitAction, setSubmitAction] = useState(null);\n    return (\n        <Formik\n            initialValues={{\n                surname: \"\",\n                firstName: \"\",\n                lastName: \"\",\n                birthday: \"\",\n                serviceNumber: \"\",\n                positionEmp: \"\",\n                division: \"\"\n            }}\n            validationSchema={validationSchema}\n            onSubmit={(values, {setSubmitting, resetForm}) => {\n                    setSubmitting(true);\n                    props.onAddEmp(values);\n                    resetForm();\n                    setSubmitting(false);\n                if(submitAction === 'saveAndTransition') {\n                    history.push('/');\n                }\n            }}\n        >\n            {({values, errors, touched, handleChange, handleSubmit}) => (\n            <Form onSubmit={handleSubmit}>\n                <Form.Group>\n                    <Form.Label column={1}>\n                        Фамилия\n                    </Form.Label>\n                    <Form.Control type=\"text\"\n                                  placeholder=\"Введите фамилию\"\n                                  name=\"surname\" id=\"surName\"\n                                  onChange={handleChange}\n                                  value={values.surname}\n                                  isValid={touched.surname && !errors.surname}\n                                  isInvalid={!!errors.surname}\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                        {errors.surname}\n                    </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label column={1}>\n                        Имя\n                    </Form.Label>\n                    <Form.Control type=\"text\"\n                                  placeholder=\"Введите имя\"\n                                  name=\"firstName\"\n                                  id=\"firstName\"\n                                  onChange={handleChange}\n                                  value={values.firstName}\n                                  isValid={touched.firstName && !errors.firstName}\n                                  isInvalid={!!errors.firstName}\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                        {errors.firstName}\n                    </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label column={1}>\n                        Отчество\n                    </Form.Label>\n                    <Form.Control type=\"text\"\n                                  placeholder=\"Введите отчество\"\n                                  name=\"lastName\"\n                                  id=\"lastName\"\n                                  onChange={handleChange}\n                                  value={values.lastName}\n                                  isValid={touched.lastName && !errors.lastName}\n                                  isInvalid={!!errors.lastName}\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                        {errors.lastName}\n                    </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label column={1}>\n                        Дата рождения\n                    </Form.Label>\n                    <Form.Control type=\"date\"\n                                  placeholder=\"Введите дату рождения\"\n                                  name=\"birthday\"\n                                  id=\"birthday\"\n                                  onChange={handleChange}\n                                  value={values.birthday}\n                                  isValid={touched.birthday && !errors.birthday}\n                                  isInvalid={!!errors.birthday}\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                        {errors.birthday}\n                    </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label column={1}>\n                        Табельный номер\n                    </Form.Label>\n                    <Form.Control type=\"number\"\n                                  placeholder=\"Введите табельный номер\"\n                                  name=\"serviceNumber\"\n                                  id=\"serviceNumber\"\n                                  onChange={handleChange}\n                                  value={values.serviceNumber}\n                                  isValid={touched.serviceNumber && !errors.serviceNumber}\n                                  isInvalid={!!errors.serviceNumber}\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                        {errors.serviceNumber}\n                    </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label column={1}>\n                        Должность\n                    </Form.Label>\n                    <Form.Control type=\"text\"\n                                  placeholder=\"Введите должность\"\n                                  name=\"positionEmp\"\n                                  id=\"positionEmp\"\n                                  onChange={handleChange}\n                                  value={values.positionEmp}\n                                  isValid={touched.positionEmp && !errors.positionEmp}\n                                  isInvalid={!!errors.positionEmp}\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                        {errors.positionEmp}\n                    </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label column={1}>\n                        Подразделение\n                    </Form.Label>\n                    <Form.Control type=\"text\"\n                                  placeholder=\"Введите подразделение\"\n                                  name=\"division\"\n                                  id=\"division\"\n                                  onChange={handleChange}\n                                  value={values.division}\n                                  isValid={touched.division && !errors.division}\n                                  isInvalid={!!errors.division}\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                        {errors.division}\n                    </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Row>\n                    <Col>\n                        <Button variant=\"dark\" onClick={() => {\n                            handleSubmit();\n                        }}>\n                            Сохранить и добавить еще\n                        </Button>\n                    </Col>\n                    <Col>\n                        <Button variant=\"secondary\" onClick={() => {\n                            setSubmitAction('saveAndTransition');\n                            handleSubmit();\n                        }}>\n                            Сохранить и перейти к списку\n                        </Button>\n                    </Col>\n                </Form.Row>\n            </Form>\n        )}\n        </Formik>\n    )\n}\n\nexport default compose(\n    withRouter,\n    connect(\n    state => ({\n        employeesStore: state\n    }),\n    dispatch => ({\n        onAddEmp: (emp) => {\n            dispatch({\n                type: employeeActions.addEmployee,\n                payload: emp\n            })\n        }\n    })\n))(EmpForm);\n","import React, {Component} from \"react\";\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport EmpForm from \"./EmpForm\";\r\n\r\nclass NewEmp extends Component {\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Row className=\"justify-content-md-center\">\r\n                    <Col md=\"4\">\r\n                        <EmpForm/>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewEmp;\r\n","const initialSettings = {\n    showSurname: true,\n    showFirstName: true,\n    showLastName: true,\n    showBirthday: true,\n    showServiceNumber: true,\n    showPositionEmp: true,\n    showDivision: true\n};\n\nexport default function settings(state = initialSettings, action) {\n    if(action.type === 'CHANGE_SETTING') {\n        let newSettings = action.payload;\n        return newSettings\n    }\n    return state\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Formik } from 'formik';\nimport { Form, Button, Col } from 'react-bootstrap';\nimport settings from \"../reducers/settings\";\n\nfunction SettingsForm(props) {\n    const {appSettings} = props;\n    return (\n        <Formik initialValues={{\n            showFirstName: appSettings.showFirstName,\n            showSurname: appSettings.showSurname,\n            showLastName: appSettings.showLastName,\n            showBirthday: appSettings.showBirthday,\n            showServiceNumber: appSettings.showServiceNumber,\n            showPositionEmp: appSettings.showPositionEmp,\n            showDivision: appSettings.showDivision\n        }}\n                onSubmit={(values) => {\n                    props.onChangeSettings(values);\n                    alert('Изменения сохранены!')\n                }}>\n            {\n                ({values, handleChange, handleSubmit}) => (\n                    <Form onSubmit={handleSubmit}>\n                        <Form.Group>\n                            <Form.Check type=\"checkbox\"\n                                        name=\"showFirstName\"\n                                        label=\"Показывать имя\"\n                                        checked={values.showFirstName}\n                                        value={values.showFirstName}\n                                        onChange={handleChange}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Check type=\"checkbox\"\n                                        name=\"showSurname\"\n                                        label=\"Показывать фамилию\"\n                                        checked={values.showSurname}\n                                        value={values.showSurname}\n                                        onChange={handleChange}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Check type=\"checkbox\"\n                                        name=\"showLastName\"\n                                        label=\"Показывать отчество\"\n                                        checked={values.showLastName}\n                                        value={values.showLastName}\n                                        onChange={handleChange}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Check type=\"checkbox\"\n                                        name=\"showBirthday\"\n                                        label=\"Показывать дату рождения\"\n                                        checked={values.showBirthday}\n                                        value={values.showBirthday}\n                                        onChange={handleChange}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Check type=\"checkbox\"\n                                        name=\"showServiceNumber\"\n                                        label=\"Показывать табельный номер\"\n                                        checked={values.showServiceNumber}\n                                        value={values.showServiceNumber}\n                                        onChange={handleChange}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Check type=\"checkbox\"\n                                        name=\"showPositionEmp\"\n                                        label=\"Показывать должность\"\n                                        checked={values.showPositionEmp}\n                                        value={values.showPositionEmp}\n                                        onChange={handleChange}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Check type=\"checkbox\"\n                                        name=\"showDivision\"\n                                        label=\"Показывать подразделение\"\n                                        checked={values.showDivision}\n                                        value={values.showDivision}\n                                        onChange={handleChange}\n                            />\n                        </Form.Group>\n                        <Button variant=\"secondary\" type=\"submit\">\n                            Сохранить изменения\n                        </Button>\n                    </Form>\n                )\n            }\n        </Formik>\n    )\n}\n\nexport default connect(\n    state => ({\n        appSettings: state.appSettings\n    }),\n    dispatch => ({\n        onChangeSettings: (emp) => {\n            dispatch({\n                type: 'CHANGE_SETTING',\n                payload: emp\n            })\n        }\n    })\n)(SettingsForm);\n","import React, {Component} from \"react\";\nimport {Container, Form} from \"react-bootstrap\";\n\nimport SettingsForm from \"./SettingsForm\";\n\nclass Settings extends Component {\n    render() {\n        return (\n            <Container>\n                <SettingsForm/>\n            </Container>\n        );\n    }\n}\n\nexport default Settings;\n","import React, { Component } from 'react';\nimport NavMenu from './components/NavMenu';\n\nimport EmpList from './components/EmpList';\nimport NewEmp from './components/NewEmp';\nimport Settings from './components/Settings';\n\nimport { HashRouter as Router, Switch, Route} from 'react-router-dom';\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n                <div className=\"App\">\n                    <NavMenu/>\n                    <Switch>\n                        <Route path=\"/\" exact component={EmpList} />\n                        <Route path=\"/newemployee\" component={NewEmp} />\n                        <Route path=\"/settings\" component={Settings} />\n                    </Switch>\n                </div>\n            </Router>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import employeeActions from './employeeActions'\n\nconst initialEmployee = {\n  surname: 'Иванов',\n  firstName: 'Иван',\n  lastName: 'Иванович',\n  birthday: '1988-01-10',\n  serviceNumber: '001872',\n  positionEmp: 'Заместитель директора',\n  division: 'Отдел контроля качества'\n};\n\nexport default function employees(state = [initialEmployee], action) {\n    let newState;\n    switch (action.type) {\n        case employeeActions.addEmployee:\n            return [\n                ...state,\n                action.payload\n            ];\n            break;\n        case employeeActions.deleteEmployee:\n            newState = state.filter((it, index) => index != action.payload);\n            return newState;\n            break;\n        case employeeActions.changeEmployee:\n            newState = state.map(((value, index) => {\n                if(index == action.payloadIndex) {\n                    return action.payloadValue\n                } else {\n                    return value\n                }\n            }));\n            return newState;\n            break;\n        default:\n            return state;\n    }\n    // if (action.type === employeeActions.addEmployee) {\n    //     return [\n    //         ...state,\n    //         action.payload\n    //     ];\n    // } else if (action.type === employeeActions.changeEmployee) {\n    //     let newState = state.map(((value, index) => {\n    //         if(index == action.payloadIndex) {\n    //             return action.payloadValue\n    //         } else {\n    //             return value\n    //         }\n    //     }));\n    //     return newState;\n    // } else if (action.type === employeeActions.deleteEmployee) {\n    //     let newState = state.filter((it, index) => index != action.payload);\n    //     return newState\n    // }\n    // return state\n}\n","import {createStore, applyMiddleware, combineReducers} from 'redux';\nimport employees from './reducers/employees';\nimport appSettings from \"./reducers/settings\";\n\nconst store = createStore(combineReducers({employees, appSettings}), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nexport default store;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport store from './store'\n\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}